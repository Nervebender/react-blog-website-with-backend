{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Johan\\\\Documents\\\\my-blog\\\\src\\\\Blog.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Post = ({\n  postId,\n  title,\n  content\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"blog-post\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n      children: /*#__PURE__*/_jsxDEV(Link, {\n        to: `/posts/${postId}`,\n        children: \"Read More\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 7\n      }, this)\n    }, post.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this);\n};\n_c = Post;\nconst Blog = () => {\n  _s();\n  const [posts, setPosts] = useState([]);\n  useEffect(() => {\n    // Fetch blog posts from your backend API\n    fetch('http://localhost:3001/posts').then(response => response.json()).then(data => setPosts(data)).catch(error => console.error('Error fetching blog posts:', error));\n  }, []); // Empty dependency array ensures the effect runs only once on mount\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: posts.map(post => /*#__PURE__*/_jsxDEV(Post, {\n      ...post\n    }, posts.postId, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n_s(Blog, \"bG8V4duoIfO0BEPgauWMVT5Qvyw=\");\n_c2 = Blog;\nexport default Blog;\nvar _c, _c2;\n$RefreshReg$(_c, \"Post\");\n$RefreshReg$(_c2, \"Blog\");","map":{"version":3,"names":["React","useState","useEffect","Link","jsxDEV","_jsxDEV","Post","postId","title","content","className","children","fileName","_jsxFileName","lineNumber","columnNumber","to","post","id","_c","Blog","_s","posts","setPosts","fetch","then","response","json","data","catch","error","console","map","_c2","$RefreshReg$"],"sources":["C:/Users/Johan/Documents/my-blog/src/Blog.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Post = ({ postId, title, content }) => {\r\n  return (\r\n    <div className=\"blog-post\">\r\n      <h2>{title}</h2>\r\n      <p>{content}</p>\r\n      <li key={post.id}>\r\n      <Link to={`/posts/${postId}`}>Read More</Link>\r\n      </li>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Blog = () => {\r\n  const [posts, setPosts] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Fetch blog posts from your backend API\r\n    fetch('http://localhost:3001/posts')\r\n      .then(response => response.json())\r\n      .then(data => setPosts(data))\r\n      .catch(error => console.error('Error fetching blog posts:', error));\r\n  }, []); // Empty dependency array ensures the effect runs only once on mount\r\n\r\n  return (\r\n    <div>\r\n        {posts.map(post => (\r\n            <Post key={posts.postId} {...post} />\r\n        ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Blog;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,IAAI,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,IAAI,GAAGA,CAAC;EAAEC,MAAM;EAAEC,KAAK;EAAEC;AAAQ,CAAC,KAAK;EAC3C,oBACEJ,OAAA;IAAKK,SAAS,EAAC,WAAW;IAAAC,QAAA,gBACxBN,OAAA;MAAAM,QAAA,EAAKH;IAAK;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAChBV,OAAA;MAAAM,QAAA,EAAIF;IAAO;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAChBV,OAAA;MAAAM,QAAA,eACAN,OAAA,CAACF,IAAI;QAACa,EAAE,EAAG,UAAST,MAAO,EAAE;QAAAI,QAAA,EAAC;MAAS;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM;IAAC,GADrCE,IAAI,CAACC,EAAE;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEZ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV,CAAC;AAACI,EAAA,GAVIb,IAAI;AAYV,MAAMc,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGtB,QAAQ,CAAC,EAAE,CAAC;EAEtCC,SAAS,CAAC,MAAM;IACd;IACAsB,KAAK,CAAC,6BAA6B,CAAC,CACjCC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAIL,QAAQ,CAACK,IAAI,CAAC,CAAC,CAC5BC,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC,CAAC;EACvE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACEzB,OAAA;IAAAM,QAAA,EACKW,KAAK,CAACU,GAAG,CAACf,IAAI,iBACXZ,OAAA,CAACC,IAAI;MAAA,GAAwBW;IAAI,GAAtBK,KAAK,CAACf,MAAM;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAa,CACvC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEV,CAAC;AAACM,EAAA,CAlBID,IAAI;AAAAa,GAAA,GAAJb,IAAI;AAoBV,eAAeA,IAAI;AAAC,IAAAD,EAAA,EAAAc,GAAA;AAAAC,YAAA,CAAAf,EAAA;AAAAe,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}