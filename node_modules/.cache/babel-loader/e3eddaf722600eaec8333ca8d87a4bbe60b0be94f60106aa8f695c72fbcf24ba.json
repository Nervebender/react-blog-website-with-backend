{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Johan\\\\Documents\\\\my-blog\\\\src\\\\BlogPostPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BlogPostPage = () => {\n  _s();\n  const {\n    postId\n  } = useParams();\n  const [post, setPost] = useState(null);\n  useEffect(() => {\n    console.log('postId:', postId);\n    const fetchPost = async () => {\n      try {\n        const response = await fetch(`http://localhost:3001/posts/${postId}`);\n        const postData = await response.json();\n        console.log('Fetched post data:', postData); // Log the fetched data\n        setPost(postData);\n      } catch (error) {\n        console.error('Error fetching post:', error);\n      }\n    };\n    fetchPost();\n  }, [postId]);\n  if (!post) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 12\n    }, this);\n  }\n  if (!post.title || !post.content || !post.date) {\n    console.error('Invalid post data:', post);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Error: Invalid post data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"individual-post\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: post.thumbnail,\n      width: \"20\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: post.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: post.content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Published on: \", new Date(post.date).toLocaleDateString()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_s(BlogPostPage, \"O8AjZodbD9JGNm955xQD6NnSmsw=\", false, function () {\n  return [useParams];\n});\n_c = BlogPostPage;\nexport default BlogPostPage;\nvar _c;\n$RefreshReg$(_c, \"BlogPostPage\");","map":{"version":3,"names":["React","useEffect","useState","useParams","jsxDEV","_jsxDEV","BlogPostPage","_s","postId","post","setPost","console","log","fetchPost","response","fetch","postData","json","error","children","fileName","_jsxFileName","lineNumber","columnNumber","title","content","date","className","src","thumbnail","width","Date","toLocaleDateString","_c","$RefreshReg$"],"sources":["C:/Users/Johan/Documents/my-blog/src/BlogPostPage.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nconst BlogPostPage = () => {\r\n  const { postId } = useParams();\r\n  const [post, setPost] = useState(null);\r\n\r\n  useEffect(() => {\r\n    console.log('postId:', postId);\r\n    const fetchPost = async () => {\r\n      try {\r\n        const response = await fetch(`http://localhost:3001/posts/${postId}`);\r\n        const postData = await response.json();\r\n        console.log('Fetched post data:', postData); // Log the fetched data\r\n        setPost(postData);\r\n      } catch (error) {\r\n        console.error('Error fetching post:', error);\r\n      }\r\n    };\r\n\r\n    fetchPost();\r\n  }, [postId]);\r\n\r\n  if (!post) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  if (!post.title || !post.content || !post.date) {\r\n    console.error('Invalid post data:', post);\r\n    return <div>Error: Invalid post data</div>;\r\n  }\r\n\r\n  return (\r\n    <div className='individual-post'>\r\n      <img src={post.thumbnail} width=\"20\" />\r\n      <h2>{post.title}</h2>\r\n      <p>{post.content}</p>\r\n      <p>Published on: {new Date(post.date).toLocaleDateString()}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BlogPostPage;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7C,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAM;IAAEC;EAAO,CAAC,GAAGL,SAAS,CAAC,CAAC;EAC9B,MAAM,CAACM,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAEtCD,SAAS,CAAC,MAAM;IACdU,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEJ,MAAM,CAAC;IAC9B,MAAMK,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,+BAA8BP,MAAO,EAAC,CAAC;QACrE,MAAMQ,QAAQ,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QACtCN,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEI,QAAQ,CAAC,CAAC,CAAC;QAC7CN,OAAO,CAACM,QAAQ,CAAC;MACnB,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdP,OAAO,CAACO,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C;IACF,CAAC;IAEDL,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAACL,MAAM,CAAC,CAAC;EAEZ,IAAI,CAACC,IAAI,EAAE;IACT,oBAAOJ,OAAA;MAAAc,QAAA,EAAK;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAC9B;EAEA,IAAI,CAACd,IAAI,CAACe,KAAK,IAAI,CAACf,IAAI,CAACgB,OAAO,IAAI,CAAChB,IAAI,CAACiB,IAAI,EAAE;IAC9Cf,OAAO,CAACO,KAAK,CAAC,oBAAoB,EAAET,IAAI,CAAC;IACzC,oBAAOJ,OAAA;MAAAc,QAAA,EAAK;IAAwB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAC5C;EAEA,oBACElB,OAAA;IAAKsB,SAAS,EAAC,iBAAiB;IAAAR,QAAA,gBAC9Bd,OAAA;MAAKuB,GAAG,EAAEnB,IAAI,CAACoB,SAAU;MAACC,KAAK,EAAC;IAAI;MAAAV,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACvClB,OAAA;MAAAc,QAAA,EAAKV,IAAI,CAACe;IAAK;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACrBlB,OAAA;MAAAc,QAAA,EAAIV,IAAI,CAACgB;IAAO;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACrBlB,OAAA;MAAAc,QAAA,GAAG,gBAAc,EAAC,IAAIY,IAAI,CAACtB,IAAI,CAACiB,IAAI,CAAC,CAACM,kBAAkB,CAAC,CAAC;IAAA;MAAAZ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC5D,CAAC;AAEV,CAAC;AAAChB,EAAA,CArCID,YAAY;EAAA,QACGH,SAAS;AAAA;AAAA8B,EAAA,GADxB3B,YAAY;AAuClB,eAAeA,YAAY;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}