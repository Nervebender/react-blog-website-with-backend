{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Johan\\\\Documents\\\\my-blog\\\\src\\\\Blog.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Post from './Post';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Blog = () => {\n  _s();\n  const [posts, setPosts] = useState([]);\n  useEffect(() => {\n    // Fetch blog posts from your backend API\n    fetch('http://localhost:3001/posts').then(response => response.json()).then(data => setPosts(data)).catch(error => console.error('Error fetching blog posts:', error));\n  }, []); // Empty dependency array ensures the effect runs only once on mount\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: posts.map(post => /*#__PURE__*/_jsxDEV(Post, {\n      ...post\n    }, post.postId, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 13\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n};\n_s(Blog, \"bG8V4duoIfO0BEPgauWMVT5Qvyw=\");\n_c = Blog;\nexport default Blog;\nvar _c;\n$RefreshReg$(_c, \"Blog\");","map":{"version":3,"names":["React","useState","useEffect","Post","jsxDEV","_jsxDEV","Blog","_s","posts","setPosts","fetch","then","response","json","data","catch","error","console","children","map","post","postId","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Johan/Documents/my-blog/src/Blog.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Post from './Post';\r\n\r\nconst Blog = () => {\r\n  const [posts, setPosts] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Fetch blog posts from your backend API\r\n    fetch('http://localhost:3001/posts')\r\n      .then(response => response.json())\r\n      .then(data => setPosts(data))\r\n      .catch(error => console.error('Error fetching blog posts:', error));\r\n  }, []); // Empty dependency array ensures the effect runs only once on mount\r\n\r\n  return (\r\n    <div>\r\n        {posts.map(post => (\r\n            <Post key={post.postId} {...post} />\r\n        ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Blog;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,IAAI,MAAM,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAEtCC,SAAS,CAAC,MAAM;IACd;IACAQ,KAAK,CAAC,6BAA6B,CAAC,CACjCC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAIL,QAAQ,CAACK,IAAI,CAAC,CAAC,CAC5BC,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC,CAAC;EACvE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACEX,OAAA;IAAAa,QAAA,EACKV,KAAK,CAACW,GAAG,CAACC,IAAI,iBACXf,OAAA,CAACF,IAAI;MAAA,GAAuBiB;IAAI,GAArBA,IAAI,CAACC,MAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAa,CACtC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEV,CAAC;AAAClB,EAAA,CAlBID,IAAI;AAAAoB,EAAA,GAAJpB,IAAI;AAoBV,eAAeA,IAAI;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}